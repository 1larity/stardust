/*
 * Copyright 2012 Richard Beech (digitale001@gmail.com)
 * Core Stardust Class, manages game data and screen navigation
 */
package com.digitale.mygdxgame;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Preferences;
import com.digitale.connex.Actor;
import com.digitale.connex.Avatar;
import com.digitale.connex.AvatarDef;
import com.digitale.connex.Channeldef;
import com.digitale.connex.Chatline;
import com.digitale.connex.GroundItem;
import com.digitale.connex.Inventory;
import com.digitale.connex.Location;
import com.digitale.connex.NPC;
import com.digitale.connex.News;
import com.digitale.connex.ShipDef;
import com.digitale.connex.celestial;
import com.digitale.screens.Char;
import com.digitale.screens.CharCreator;
import com.digitale.screens.CharPicker;
import com.digitale.screens.Chat;
import com.digitale.screens.GameLoop;
import com.digitale.screens.Help;
import com.digitale.screens.InventoryScreen;
import com.digitale.screens.Login;
import com.digitale.screens.Map;
import com.digitale.screens.Market;
import com.digitale.screens.NewAccount;
import com.digitale.screens.Options;
import com.digitale.screens.Ship;
import com.digitale.screens.Solar;
import com.digitale.screens.Splash;
import com.digitale.screens.StardustScreen;
import com.digitale.sim.Simulation;
import com.digitale.utils.Checker;
import com.digitale.utils.DataOp;
import com.digitale.utils.DataOpImpl;
import com.digitale.utils.NativeFunctions;

public class Stardust3d extends Game   {
	//debug for spammy outputs
	public static final boolean DEEPDEBUG = false;
	//system debug flag
	public static final boolean DEBUG = false;
	public static NativeFunctions mNativeFunctions;
	public static boolean selectScreen;
	private String helptext="Leave login details as they are, and press the Log In button to use a guest account.\n" +
			"In flight controls:-\n" +
			"PC keyboard controls:-\n A=accelerate, Z=deccelerate‎, S=Stop, Cursor Keys steer ship, Space bar to shoot.\n\n Touch screen control & mouse:-\n" +
			"Click arrow in top left to pull-out menu bar.\n" +
			"Thumb control (bottom left) moves camera.\n" +
			"Click and hold on the top and bottom of speed meter (middle of left side of screen) to accelerate/deccelerate‎.\n" +
			"Shoot gun by touching bottom right button.\n" +
			"When close enough to station, a docking button will appear, top right of screen, click it to dock. Use the same button to undock your ship.\n";
	public static boolean tinyfont;	
	public static String mchatlines="unitialised";

	
	public Stardust3d(NativeFunctions nativeFunctions) {
		mNativeFunctions = nativeFunctions;
	}

	/** flag indicating whether we were initialised already **/
	private static boolean isInitialized = false;
	// debugger init
	public static String currencharacteruid="0";
	public static int muser;
	/** the current screen **/
	public static int gameMode = 1;
	public static DataOp MyDataOp = new DataOpImpl();
	public static Avatar myCharacter = new Avatar();
	public static long mnetworkPing;
	public static long mParsePing;
	public static NPC[] npcList = new NPC[210];
	public static celestial[] solarSystem = new celestial[50];
	public static String mserverTime;
	public static GroundItem LandTypes[] = new GroundItem[20];
	public static Location[][] LandScape = new Location[64][64];
	public static String muserExists;
	public static News news[] = new News[5];
	// character list vars
	public static Avatar[] charList = new Avatar[10];
	public static Avatar[] tempchar;
	//ship graphic definitions
	public static List<ShipDef> shipdefs = new ArrayList<ShipDef>();
	
	public static int numberOfCharacters;
	// inventory vars
	private static int numberOfItems = 0;
	private static String mnewslines;
	// inventory list used to load data public for DataOps
	public static Inventory[] loadInventory = new Inventory[500];
	// finalised inventory available to rest of app without nulls.
	public static Inventory[] myInventory;
	public static boolean mremeberAccountname;
	public static boolean mloginOK;
	public static float sfxVolume=0.5f;
	public static float musicVolume=0.5f;
	//error flag and constants
	public static final int ALL_OK = 0;

	public static final int NETWORK_DOWN = 1;
	public static final int SERVER_DOWN = 2;
	public static final int TEST_ERROR = 3;
	
	public static int Error=ALL_OK;
	public static List<AvatarDef> avatarList= new ArrayList<AvatarDef>();
	public static List<Chatline> chatList= new ArrayList<Chatline>();
	public static List<Channeldef> channelList= new ArrayList<Channeldef>();
	public static List<Actor> actorsList= new ArrayList<Actor>();
	public static String generatedFirstName="";
	public static String generatedSurName="";
	public static boolean fontsize;
	@Override
	public void dispose() {
		SoundManager.dispose();
		Simulation.timer.cancel();
		MyDataOp.setRunning(false);
	}

	@Override
	public void render() {
		 StardustScreen currentScreen=getScreen();
		// update the screen
		currentScreen.update(Gdx.graphics.getDeltaTime());
		// render the screen
		currentScreen.render(Gdx.graphics.getDeltaTime());
		// when the screen is done we change to the
		// next screen
		if (selectScreen){
			//coming from a screen we dont want to dispose ie main sim
			switch(gameMode){
			case 2:
				if(Stardust3d.DEBUG) System.out.println("run login");
				setScreen( new Login(mnewslines));
				break;
			case 3:
				if(Stardust3d.DEBUG) System.out.println("run charpicker");
				setScreen ( new CharPicker());
				break;
			// run game
			case 4: 
				if(Stardust3d.DEBUG) System.out.println("run game");
				setScreen (new GameLoop());
				break;
			case 5: 
				if(Stardust3d.DEBUG) System.out.println("run char");
				setScreen (new Char());
				break;
			case 6: 
				if(Stardust3d.DEBUG) System.out.println("run options");
				setScreen (new Options());
				break;
			case 7: 
				if(Stardust3d.DEBUG) System.out.println("run map");
				setScreen (new Map());
				break;
			case 8: 
				if(Stardust3d.DEBUG) System.out.println("run solar sys info");
				setScreen (new Solar());
				break;
			case 9: 
				if(Stardust3d.DEBUG) System.out.println("run help");
				setScreen (new Help(helptext));
				break;
			case 10: 
				if(Stardust3d.DEBUG) System.out.println("run ship info");
				setScreen (new Ship());
				break;
			case 11: 
				refreshChat();
				setScreen (new Chat(mchatlines));
				break;
			case 12: 
				if(Stardust3d.DEBUG) System.out.println("run inventory ");
				setScreen (new InventoryScreen());
				break;
			case 13: 
				if(Stardust3d.DEBUG) System.out.println("run ship info");
				setScreen (new Market());
				break;
			case 14: 
				if(Stardust3d.DEBUG) System.out.println("run new account");
				setScreen (new NewAccount());
				break;
			}
			//reset selectscreen so we only call once
			selectScreen=false;
		}
			
		if (currentScreen.isDone()) {
			// dispose the current screen
			//may be some screens we dont want to dispose main sim
			currentScreen.dispose();
			//  switch to requested screen
			// the game loop	
			if(Stardust3d.DEBUG) System.out.println("running mode" + gameMode);
			switch(gameMode){
			case 2:
				if(Stardust3d.DEBUG) System.out.println("run login");
				setScreen( new Login(mnewslines));
				break;
			case 3:
				if(Stardust3d.DEBUG) 	System.out.println("run charpicker");
				setScreen ( new CharPicker());
				break;
			// run game
			case 4: 
				if(Stardust3d.DEBUG) System.out.println("run game");
				setScreen (new GameLoop());
				break;
			case 5: 
				if(Stardust3d.DEBUG) System.out.println("run char");
				setScreen (new Char());
				break;
			case 6: 
				if(Stardust3d.DEBUG) System.out.println("run options");
				setScreen (new Options());
				break;
			case 7: 
				if(Stardust3d.DEBUG) System.out.println("run map");
				setScreen (new Map());
				break;
			case 8: 
				if(Stardust3d.DEBUG) System.out.println("run solar sys info");
				setScreen (new Solar());
				break;
			case 9: 
				if(Stardust3d.DEBUG) System.out.println("run help");
				setScreen (new Help(helptext));
				break;
			case 10: 
				if(Stardust3d.DEBUG) System.out.println("run ship info");
				setScreen (new Ship());
				break;
			case 11: 
				
				if(Stardust3d.DEBUG) System.out.println("run chat");
				refreshChat();
				setScreen (new Chat(mchatlines));
				break;
			case 12: 
				if(Stardust3d.DEBUG) System.out.println("run inventory ");
				setScreen (new InventoryScreen());
				break;
			case 13: 
				if(Stardust3d.DEBUG) System.out.println("run ship info");
				setScreen (new Market());
				break;
			case 14: 
				if(Stardust3d.DEBUG) System.out.println("run new account");
				setScreen (new NewAccount());
				break;
			case 15: 
				if(Stardust3d.DEBUG) System.out.println("run new character");
				setScreen (new CharCreator(muser));
				break;
			
			}
		}
	}

	@Override
	public void resize(int width, int height) {

	}

	@Override
	public void create() {
		MyDataOp.start();
		if (!isInitialized) {
			
			try {
				Checker.CheckEncryption();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			loadPrefs();
			
			setScreen(new Splash());
				
			isInitialized = true;
		}
		
	}

	/**
	 * 
	 */
	private void loadPrefs() {
		//get prefs, if no prefs (-1) use factory setting
		Preferences prefs = Gdx.app.getPreferences("stardustpreferences");
		float tempFloat;
		boolean tempBoolean;
		tempBoolean=prefs.getBoolean("fontsize",false);
		tinyfont=tempBoolean;
		tempFloat=prefs.getFloat("sfxvolume",-1);
		if (tempFloat != -1)
		sfxVolume=tempFloat;
		tempFloat=prefs.getFloat("musicvolume",-1);
		if (tempFloat != -1)
		musicVolume=tempFloat;
	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub
		if(Stardust3d.DEBUG) System.out.println("resume");
	}

	public static void showmap() {
		mNativeFunctions.openURL("http://www.example.com");
		Gdx.app.exit();
	}





	/**
	 * For this game each of our screens is an instance of StardustScreen.
	 * @return the currently active {@link StardustScreen}. */
	public StardustScreen getScreen () {
		return (StardustScreen)super.getScreen();
	}
	
	//refresh actors data
public static void refreshActors(){

		Stardust3d. MyDataOp.getLocalPlayers(Stardust3d.myCharacter.getX(),
				Stardust3d.myCharacter.getY(),
				Stardust3d.myCharacter.getZ());
	


}
	/**
 * Get latest chat data
 */
public static void refreshChat() {
	chatList.clear();
	MyDataOp.getchat();
	
	String tempChatlines="";
	for (int i = 0; i < chatList.size(); i++) {
		// check to see that there is news to add
		if (chatList.get(i).getMessage()!= null) {
			// Create chat string nicely formatted
			String timeConvert=chatList.get(i).getTimestamp().toString();
			tempChatlines = tempChatlines + timeConvert.substring(11,timeConvert.length()-2) + " ["+chatList.get(i).getChannelname()+"] "
					+ chatList.get(i).getName() + ": " + chatList.get(i).getMessage()
					+ " \n";
			
		}
	}
	if (mchatlines.length()!=tempChatlines.length())mchatlines=tempChatlines;
}

	/**
 * 
 */
public static void populateCharacterlist(int user) {
	MyDataOp.getChars(user);
	numberOfCharacters = 0;
	for (int i = 0; i < charList.length; i++) {
		if (charList[i].getFirstname() != null) {

			numberOfCharacters++;
		}
	}
}

	public static void loadstage01() {
		MyDataOp.getShipDefs();
		for (int i = 0; i < shipdefs.size(); i++) {
		if(Stardust3d.DEBUG) System.out.println("shipdef " +i+" "+ shipdefs.get(i).getModel());
		}

		for (int i = 0; i < solarSystem.length; i++) {
			solarSystem[i] = new celestial();
		}
		
	}

	public static void loadstage02() {
		MyDataOp.getAvatarDefs();
		for (int i = 0; i < avatarList.size(); i++) {
		if(Stardust3d.DEBUG) System.out.println("avatardef " +i+" "+ avatarList.get(i).getDescription());
		}
		
		for (int i = 0; i < charList.length; i++) {
			charList[i] = new Avatar();
		}

		
	}

	public static void loadstage03() {
		// copy to new array without nulls
					tempchar = new Avatar[numberOfCharacters];
					for (int i = 0; i < tempchar.length; i++) {
						tempchar[i] = charList[i];
					}
					// convert array to list
					List<Avatar> charRealList = Arrays.asList(tempchar);

					// setListAdapter(new CharacterArrayAdaptor(this, charRealList));
					// setListAdapter(new CharacterArrayAdapter(this, charRealList));

					for (int i = 0; i < npcList.length; i++) {
						npcList[i] = new NPC();
					}

					for (int i = 0; i < LandTypes.length; i++) {
						LandTypes[i] = new GroundItem();
					}
					for (int x = 0; x < 64; x++) {
						for (int y = 0; y < 64; y++) {
							LandScape[x][y] = new Location();
						}
					}
					for (int i = 0; i < loadInventory.length; i++) {
						loadInventory[i] = new Inventory();
					}
		
	}

	public static void loadstage04() {
		String returnString = "test";
		MyDataOp.getLandTypeData(returnString);
		MyDataOp.getLandscapeData(returnString);
		
	}

	public static void loadstage05() {
		String returnString = "test";
		MyDataOp.getNPCData(returnString);
		MyDataOp.getServerTime(returnString);
		
	}

	public static void loadstage06() {
		

		MyDataOp.getInventory(Integer.valueOf(currencharacteruid));
		numberOfItems = 0;
		for (int i = 0; i < loadInventory.length; i++) {
			if (loadInventory[i].getItem() != null) {

				numberOfItems++;
			}
			// Log.w(LOG_TAG, "Number of items  "+numberOfItems);

		}
		// copy to new array without nulls
		myInventory = new Inventory[numberOfItems];
		for (int i = 0; i < myInventory.length; i++) {
			myInventory[i] = loadInventory[i];
		}

		for (int i = 0; i < news.length; i++) {
			news[i] = new News();
		}
	
		
	}

	public static void loadstage07() {
		MyDataOp.getNews();

		 mnewslines = "";
		// insert news text into newsTextView
		for (int i = 0; i < news.length; i++) {
			// check to see that there is news to add
			if (news[i].get_title() != null) {
				// Create news string nicely formatted

				mnewslines = mnewslines + news[i].get_title() + "\n"
						+ news[i].get_date() + "\n" + news[i].get_text()
						+ " \n";
				mnewslines = mnewslines
						+ "________________________________________\n";
			}
		}
		 	
		
	}

	public static void loadstage08() {
		MyDataOp.getChatDefs();
		for (int i = 0; i < channelList.size(); i++) {
		if(Stardust3d.DEBUG) System.out.println("channeldef " +i+" "+ channelList.get(i).getChannelname());
		}
		
		for (int i = 0; i < charList.length; i++) {
			charList[i] = new Avatar();
		}	
	}

	public static void loadstage09() {
		// TODO Auto-generated method stub
		
	}

	public static void loadstage10() {
		// TODO Auto-generated method stub
		
	}



}
